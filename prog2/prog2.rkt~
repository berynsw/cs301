#lang racket

;; Useful helper functions

(define (contains? x S)
  (cond ((null? S) false)
        ((equal? x (car S)) true)
        (else (contains? x (cdr S)))))

(define (implies P Q)
  (or (not P) Q))

;; Universe definitions

(define A '(hutchinson hearne fizzano 241 301 474 493 dennis doris spruce redwood rose))
(define altA (list 1 2 3))

;; Relation definitions

(define is-faculty '((hutchinson) (hearne) (fizzano)))

(define is-course '((301) (241) (474) (493)))

(define is-student '((dennis) (doris)))

; (a,b,c) means faculty member a teaches course b to student c
(define teaches-to '((hutchinson 301 dennis) (hutchinson 241 doris) (hearne 301 doris) (hearne 493 dennis) (fizzano 474 doris))) 

(define is-person '((hutchinson) (hearne) (fizzano) (dennis) (doris)))

(define is-tree '((spruce) (redwood)))

(define is-plant '((spruce) (redwood) (rose)))

(define taller-than '((redwood spruce) (redwood doris) (redwood dennis) (spruce doris) (spruce dennis) (dennis doris)))

; altR matches altA (useful for testing binary relations)
(define altR (list (cons 1 2) (cons 1 3) (cons 2 2) (cons 3 3) (cons 3 1) (cons 1 1) (cons 2 3)))

;; Predicate definitions

(define (is-faculty? x)
  (contains? (list x) is-faculty))

(define (is-course? x)
  (contains? (list x) is-course))

(define (is-student? x)
  (contains? (list x) is-student))

(define (teaches-to? prof course student)
  (contains? (list prof course student) teaches-to))

(define (is-person? x)
  (contains? (list x) is-person))

(define (is-tree? x)
  (contains? (list x) is-tree))

(define (is-plant? x)
  (contains? (list x) is-plant))

(define (taller-than? x y)
  (contains? (list x y) taller-than))




(define (for-all A fx)
  (if (null? A) #t
      (if (fx (car A))
          (for-all (cdr A) fx)
          #f)))

(define (there-exists A fx)
  (if (null? A) #f
      (if (fx (car A)) #t
          (there-exists (cdr A) fx))))

(define (predicate-logic A L fx [curryFx (curry fx)])
  (if (null? L) curryFx
      (if (equal? 'forall (car L))
          (for-all A (lambda (x) (predicate-logic A
                                                  (cdr L)
                                                  fx
                                                  (curryFx x))))
          (there-exists A (lambda (x) (predicate-logic A
                                                       (cdr L)
                                                       fx
                                                       (curryFx x)))))))




(define (wff1 A)
  (predicate-logic A (list 'forall) (lambda (x)
                                      (implies (is-tree? x)
                                               (is-plant? x)))))

(define (wff2 A)
  (predicate-logic A (list 'exists 'forall) (lambda (x y)
                                              (implies (is-plant? y)
                                                       (and
                                                        (is-tree? x)
                                                        (not (taller-than? y x)))))))

(define (wff3 A)
  (predicate-logic A (list 'exists 'exists) (lambda (x y)
                                              (and (is-tree? x)
                                                   (not (is-tree? y))
                                                   (taller-than? y x)))))

(define (wff4 A)
  (predicate-logic A (list 'forall) (lambda (x)
                                      (implies (is-student? x)
                                               (is-person? x)))))

(define (wff5 A)
  (predicate-logic A (list 'exists) (lambda (x)
                                      (and (is-faculty? x)
                                           (is-student? x)))))

(define (wff6 A)
  (predicate-logic A (list 'exists 'exists 'exists) (lambda (x y z)
                                                      (and (is-faculty? x)
                                                           (is-student? y)
                                                           (is-course? z)
                                                           (teaches-to? x z y)))))

(wff1 A)
(wff2 A)
(wff3 A)
(wff4 A)
(wff5 A)
(wff6 A)

(define (reflexive? A R)
  (predicate-logic A (list 'forall) (lambda (x) (contains? (cons x x) R))))

(define (irreflexive? A R)
  (predicate-logic A (list 'forall) (lambda (x) (not (contains? (cons x x) R)))))

(define (symmetric? A R)
  (predicate-logic A (list 'forall 'forall)
                   (lambda (x y)
                     (implies (contains? (cons x y) R)
                              (contains? (cons y x) R)))))

(define (anti-symmetric? A R)
  (predicate-logic A (list 'forall 'forall)
                   (lambda (x y)
                     (implies (and (contains? (cons x y) R)
                                   (contains? (cons y x) R))
                              (equal? x y)))))

(define (transitive? A R)
  (predicate-logic A (list 'forall 'forall 'forall)
                   (lambda (x y z)
                     (implies (and (contains? (cons x y) R)
                                   (contains? (cons y z) R))
                              (contains? (cons x z) R)))))

(define (total? A R)
  (predicate-logic A (list 'forall 'forall)
                   (lambda (x y)
                     (or (contains? (cons x y) R)
                         (contains? (cons y x) R)))))



; Unit tests for reflexive?, all must be true
"Starting reflexive? unit tests"
(define A2 '(1 2 3))
(define R2 (list (cons 1 1) (cons 2 2) (cons 3 3)))
(define R3 (list (cons 1 1) (cons 3 3)))
(reflexive? A2 R2)
(not (reflexive? A2 R3))
; Unit tests for irreflexive?, all must be true
"Starting irreflexive? unit tests"
(define A3 '(1 2 3))
(define R4 (list (cons 1 1) (cons 2 2) (cons 3 3)))
(define R5 (list (cons 1 1) (cons 2 3)))
(define R6 (list (cons 1 2) (cons 2 3)))
(not (irreflexive? A3 R4))
(not (irreflexive? A3 R5))
(irreflexive? A3 R6)
; Unit tests for symmetric?, all must be true
"Starting symmetric? unit tests"
(define A4 '(1 2 3))
(define R7 (list (cons 1 2) (cons 2 1)))
(define R8 (list (cons 1 2) (cons 2 1) (cons 1 3)))
(symmetric? A4 R7)
(not (symmetric? A4 R8))
; Unit tests for anti-symmetric?, all must be true
"Starting anti-symmetric? unit tests"
(define A5 '(1 2 3))
(define R9 (list (cons 1 2) (cons 1 3) (cons 1 1)))
(define R10 (list (cons 1 2) (cons 2 1)))
(anti-symmetric? A5 R9)
(not (anti-symmetric? A5 R10))
; Unit tests for transitive?, all must be true
"Starting transitive? unit tests"
(define A6 '(1 2 3))
(define R11 (list (cons 1 2) (cons 2 3) (cons 1 3)))
(define R12 (list (cons 1 2) (cons 2 3)))
(define R13 (list (cons 1 3) (cons 2 3) (cons 3 4) (cons 1 4) (cons 2 4)))
(transitive? A6 R11)
(not (transitive? A6 R12))
(transitive? A6 R13)
; Unit tests for total?, all must be true
"Starting total? unit tests"
(define A7 '(1 2 3))
(define R14 (list (cons 1 2) (cons 1 3) (cons 2 3) (cons 1 1) (cons 2 2) (cons 3 3)))
(define R15 (list (cons 1 2) (cons 1 3)))
(define R16 (list (cons 1 2) (cons 3 1) (cons 2 3) (cons 1 1) (cons 2 2) (cons 3 3)))
(total? A7 R14)
(not (total? A7 R15))
(total? A7 R16)
